Existe uma relação de Composição entre as classes Dependente e Cliente, de modo que a classe Dependente
é parte da classe Cliente, e nesse contexto, Dependente não pode existir sem Cliente. Essa relação não existe no sentido
oposto, pois Cliente pode existir sem o Dependente.

É notada uma relação de Herança entre as classes Evento e Roteiro, Deslocamento e Pernoite, em que todas
elas herdam de Evento. Isto define uma generalização de um conceito, pois Roteiro, Deslocamento e Pernoite
são um tipo de Evento, e possuem características semelhantes entre sí, como a duração, por exemplo.

Há uma relação de Agregação entre as classes Pacote e Evento, pois são duas classes que se completam,
mas cada uma delas pode existir sem depender da outra.

Esboço:


class Cliente 
{
private:
  string nome;
  string cpf;
  vector<Pacote *> pacotes;

public:
  Cliente(string nome, string cpf)
  {
    this->cpf = cpf;
    this->nome = nome;
    this->pacotes = {};
  }

  void setPacotes(Pacote *pacote)
  {
    this->pacotes.push_back(pacote);
  }
  vector<Pacote *> &getPacotes()
  {
    return pacotes;
  }
  string getNome()
  {
    return nome;
  }

  void setNome(string nome)
  {
    this->nome = nome;
  }

  string getCPF()
  {
    return cpf;
  }

  void setCPF(string cpf)
  {
    this->cpf = cpf;
  }
};

class Dependente
{
private:
  string nome;
  Cliente *dependenteDe;

public:
  string getNome()
  {
    return nome;
  }

  void setNome(string nome)
  {
    this->nome = nome;
  }

  Cliente getDependente()
  {
    return *dependenteDe;
  }

  void setDependente(Cliente *dependenteDe)
  {
    this->dependenteDe = dependenteDe;
  }
  string getCpfResponsavel()
  {
    dependenteDe->getCPF();
  }
};

class Evento
{
private:
  string nome;
  double duracao;

public:
  Evento(string nome, double duracao)
  {
    this->nome = nome;
    this->duracao = duracao;
  }

  string getNome()
  {
    return nome;
  }

  void setNome(string nome)
  {
    this->nome = nome;
  }
  double getDuracao()
  {
    return duracao;
  }

  void setDuracao(double duracao)
  {
    this->duracao = duracao;
  }
};

class Pacote
{
private:
  string nome;
  vector<Evento *> eventos;
  vector<Cliente *> clientes;

public:
  Pacote()
  {
  }

  string getNome()
  {
    return nome;
  }

  vector<Evento *> getEventos()
  {
    return eventos;
  }

  vector<Cliente *> getClientes()
  {
    return clientes;
  }
  void setClientes(Cliente *cliente)
  {
    this->clientes.push_back(cliente);
  }
  void setNome(string nome)
  {
    this->nome = nome;
    this->clientes = {};
  }

  void adicionarEvento(Evento *evento)
  {
    eventos.push_back(evento);
  }
};

class Roteiro : public Evento
{

public:
  Roteiro(string nome, double duracao) : Evento(nome, duracao)
  {
  }
};

class Deslocamento : public Evento
{

public:
  Deslocamento(string nome, double duracao) : Evento(nome, duracao)
  {
  }
};

class Pernoite : public Evento
{

public:
  Pernoite(string nome, double duracao) : Evento(nome, duracao)
  {
  }
};
